?Arithmetic
`+`(1,2)
1 in c(1,2,3)
1 %in% c(1,2,3)
1 in seq_along(c(1,2,3))
?seq_along(c(1,2,3))
?sapply
install.packages('rmarkdown')
install.packages('yaml')
install.packages("knitr", type = "binary")
install.packages("stringr")
install.packages("stringi", type = "source")
heights <- read . csv ("../ data / heights . csv ")
heights <- read.csv ("../ data / heights . csv ")
heights <- read.csv ("../ data / heights.csv ")
heights <- read.csv ("../data/heights.csv")
rstudioapi::addTheme("https://raw.githubusercontent.com/rtjohnson12/rstudio-themes/master/src/github-dark.rstheme", apply=TRUE, force=TRUE)
install.packages('rstudioapi')
rstudioapi::addTheme("https://raw.githubusercontent.com/rtjohnson12/rstudio-themes/master/src/github-dark.rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/lusignan/RStudio-Material-Theme/main/material-darker.rstheme", apply = TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/lusignan/RStudio-Material-Theme/main/material-ocean.rstheme", apply = TRUE)
heights <- read . csv ("../ data / heights . csv ")
heights <- read.csv("../data/heights.csv")
salaries <- read.csv("../custom-datasets/ds_salaries.csv")
head(salaries)
View(salaries)
str(salaries)
salaries %>% [,-1]
salaries[,-1]
View(salaries)
summary(salaries)
View(salaries)
salaries <- read.csv("../custom-datasets/ds_salaries.csv",stringsAsFactors = TRUE)
str(salaries)
salaries <- read.csv("../custom-datasets/ds_salaries.csv")
clear()
salaries <- read.csv("../custom-datasets/ds_salaries.csv")
colnames(salaries)
str(salaries)
salaries[,c(experience_level, employment_type, company_size)]
salaries[,c("experience_level", "employment_type", "company_size")]
?as.factor
factor(salaries$experience_level)
# factors: "experience_level", "employment_type", "company_size"
salaries$experience_level <- factor(salaries$experience_level)
str(salaries)
View(salaries)
source("~/NUS/DSA2101/src/lec2_own.R", echo=TRUE)
str(salaries)
factor(salaries$employee_residence)
unique(salaries$employee_residence)
apply(salaries, 2, function(x) sum(is.na(x)))
hist(salaries$salary)
hist(salaries$salary_in_usd)
?hist
hist(salaries$salary_in_usd, breaks=10)
hist(salaries$salary_in_usd, breaks=100)
hist(salaries$salary_in_usd, breaks=20)
hist(salaries$salary_in_usd, breaks=30)
hist(salaries$salary_in_usd, breaks=20)
hist(salaries$salary_in_usd, breaks=30)
hist(salaries$salary_in_usd, breaks=30, freq=FALSE)
?hist
hist(salaries$salary_in_usd, bins=30, freq=FALSE)
hist(salaries$salary_in_usd, breaks=30, freq=FALSE)
hist(salaries$salary_in_usd, breaks=30, freq=FALSE)
?seq
# hist(salaries$salary_in_usd, breaks=seq(,length.out=30), freq=FALSE)
max(salaries$salary_in_usd)
min(salaries$salary_in_usd)
hist(salaries$salary_in_usd, breaks=seq(min(salaries$salary_in_usd),max(salaries$salary_in_usd),length.out=30), freq=FALSE)
hist(salaries$salary_in_usd, breaks=seq(min(salaries$salary_in_usd),max(salaries$salary_in_usd),length.out=20), freq=FALSE)
hist(salaries$salary_in_usd, breaks=seq(min(salaries$salary_in_usd),max(salaries$salary_in_usd),length.out=10), freq=FALSE)
hist(salaries$salary_in_usd, breaks=seq(min(salaries$salary_in_usd),max(salaries$salary_in_usd),length.out=400), freq=FALSE)
hist(salaries$salary_in_usd, breaks=seq(min(salaries$salary_in_usd),max(salaries$salary_in_usd),length.out=40), freq=FALSE)
hist(salaries$salary_in_usd/1000, breaks=seq(min(salaries$salary_in_usd),max(salaries$salary_in_usd),length.out=40), freq=FALSE)
hist(salaries$salary_in_usd/1000, breaks=seq(min(salaries$salary_in_usd)/1000,max(salaries$salary_in_usd)/1000,length.out=40), freq=FALSE, xlab="Salary in kUSD")
hist(salaries$salary_in_usd/1000, breaks=seq(min(salaries$salary_in_usd)/1000,max(salaries$salary_in_usd)/1000,length.out=40), freq=FALSE, xlab="Salary in kUSD", main="Data Science Salaries")
hist(salaries$salary_in_usd/1000,
breaks=seq(min(salaries$salary_in_usd)/1000,
max(salaries$salary_in_usd)/1000,
length.out=40),
freq=FALSE, xlab="Salary in kUSD",
main="Data Science Salaries")
hist(salaries$salary_in_usd/1000,
breaks=seq(min(salaries$salary_in_usd)/1000,
max(salaries$salary_in_usd)/1000,
length.out=40),
freq=FALSE, xlab="Salary in kUSD",
main="Data Science Salaries")
colnames(salaries)
str(salaries)
mean(salaries$salary_in_usd)
abline(v = mean(salaries$salary_in_usd))
abline( = mean(salaries$salary_in_usd)/1000)
abline(v = mean(salaries$salary_in_usd)/1000)
size(salaries)
## EPL DATA
football <- read.csv("../data/EPL_1415_1516.csv")
str(football)
length(unique(football$HomeTeam))
length(unique(football$AwayTeam))
length(unique(football$FGW))
length(unique(football$NGT))
football <- read.csv("../data/EPL_1415_1516.csv")
View(football)
football <- read.csv("../data/EPL_1415_1516.csv",
na.strings="-")
View(football)
library(stringr)
football_lines <- readLines("../data/EPL_1415_1516.csv")
football_lines
?str_split
football_lines <- str_split(football_lines, ",")
View(football_lines)
str(football_lines)
loadRDS("../data/hawker_ctr_raw.rds")
RDS("../data/hawker_ctr_raw.rds")
load("../data/hawker_ctr_raw.rds")
?load
load(file="../data/hawker_ctr_raw.rds")
a <- list(a=c(1,2,3,4,5,6), b=c(1,5,2), d=c(2,2,2))
a
sapply(a, mean)
a
sapply(a, mean)
sapply(a, count)
sapply(a, mean)
lapply(a, mean)
sapply(a, mean)
?apply
a <- matrix(c(1,2,3,4),nrow = 2)
a
sapply(a, mean)
sapply(a, function(x) x^2)
/sapply
?sapply
apply(a,1,mean)
?replicate
replicate(10, rnorm(1,10))
?rnorm
replicate(100, rnorm(1,10))
replicate(100, rnorm())
replicate(100, rnorm(1))
replicate(100, rnorm(mean=0,sd=1))
replicate(100, function(x) rnorm(x, mean=0,sd=1))
replicate(100, a <- function(x) rnorm(x, mean=0,sd=1))
replicate(100, a <- (function(x) rnorm(x, mean=0,sd=1)))
?replicate
## use of replicate() with parameters:
foo <- function(x = 1, y = 2) c(x, y)
# does not work: bar <- function(n, ...) replicate(n, foo(...))
bar <- function(n, x) replicate(n, foo(x = x))
bar(5, x = 3)
foo
a
b <- seq(1,13,by=2)
b
b <- seq(1,123, by=2)
b
replicate(b, sqrt)
sqrt
?sqrt
?replicate
replicate(100, rnorm)
replicate(100, rnorm(1,10))
replicate(100, rnorm(1,10))
foo <- function(x = 1, y = 2) c(x, y)
bar <- function(n, x) replicate(n, foo(x = x))
bar(5, x = 3)
?barplot
